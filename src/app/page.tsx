"use client";

import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { ThemeToggle } from "@/components/theme-toggle";
import { Fragment } from "react";

// Content variables
const brandName = "ImAiPage";
const heroTitle = "Hello, I'm generated by AI";
const heroSubtitle =
  "This page and its structure were dynamically generated by an LLM following patterns and components sourced from the Kibo UI design system.";
const techBadges: string[] = ["AI", "Kibo UI", "MCP Server", "Next.js", "Copilot"];

const sections: Array<{
  id: string;
  title: string;
  description: string;
}> = [
  {
    id: "ai-generation",
    title: "The Experiment: Copilot-Driven UI Assembly",
    description:
      "This platform is a demonstration of how a sophisticated Copilot, armed with extensive instructions and contextual knowledge, can move beyond simple text generation to create complex, production-ready user interfaces. It highlights the shift from code snippets to complete, structured web components.",
  },
  {
    id: "kubi-patterns",
    title: "Leveraging Kubi-UI Patterns Registry",
    description:
      "Kubi UI serves as the core design language. The Copilot is instructed to pull components and structures exclusively from the Kubi Patterns Registry. This ensures every generated section adheres to a consistent, pre-vetted component library, guaranteeing quality, accessibility, and uniform design language across the entire page.",
  },
  {
    id: "mcp-context",
    title: "Context from the Shadcn MCP Server",
    description:
      "The Copilot's instruction set includes deep contextual knowledge derived from the Shadcn MCP Server environment. This means the generation logic is optimized for modularity and composability, treating the UI elements not as static code, but as adaptable components ready for immediate integration into modern, complex web applications.",
  },
  {
    id: "future",
    title: "From Prompt to Production",
    description:
      "This project aims to test the limits of generative AI in building interfaces that are not only aesthetically pleasing but structurally sound and compliant with modern component libraries (Kubi/shadcn).",
  },
];

export default function Home() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* Fixed Navigation Header */}
      <header
        className="fixed top-0 w-full z-50 border-b bg-background/80 backdrop-blur-sm"
        role="banner"
        aria-label="Main navigation"
      >
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <div className="shrink-0">
              <h1 className="text-xl font-bold">{brandName}</h1>
            </div>

            {/* Theme Toggle */}
            <ThemeToggle />
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section
        className="min-h-screen flex items-center justify-center relative bg-gradient-to-br from-background via-muted/20 to-background pt-16"
        aria-label="Hero section"
      >
        {/* Gradient overlay for visual effect */}
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_top_right,var(--tw-gradient-stops))] from-primary/10 via-transparent to-accent/10" />

        <div className="relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 text-center">
          {/* Technology Badges */}
          <div className="flex flex-wrap justify-center gap-2 mb-8">
            {techBadges.map((tech, index) => (
              <Badge
                key={index}
                variant="outline"
                className="border-primary/50"
              >
                {tech}
              </Badge>
            ))}
          </div>

          {/* Main Title */}
          <h1 className="text-4xl sm:text-5xl lg:text-7xl font-bold mb-6 tracking-tight">
            {heroTitle}
          </h1>

          {/* Subtitle */}
          <p className="text-lg sm:text-xl lg:text-2xl text-muted-foreground max-w-3xl mx-auto mb-10 leading-relaxed">
            {heroSubtitle}
          </p>

          {/* CTA Button */}
          <Button
            size="lg"
            className="font-semibold px-8 py-6 text-lg"
            onClick={() => {
              const element = document.getElementById('ai-generation');
              if (element) {
                const headerOffset = 80;
                const elementPosition = element.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                window.scrollTo({
                  top: offsetPosition,
                  behavior: 'smooth'
                });
              }
            }}
          >
            Explore the Patterns
          </Button>
        </div>
      </section>

      {/* Content Sections */}
      <main
        className="container mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20 lg:py-24"
        role="main"
        aria-label="Main content"
      >
        <div className="space-y-12 sm:space-y-16 lg:space-y-20">
          {sections.map((section, index) => (
            <Fragment key={section.id}>
              {/* Section Card */}
              <article
                id={section.id}
                className="max-w-4xl mx-auto"
                aria-labelledby={`${section.id}-title`}
              >
                <Card className="backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle
                      id={`${section.id}-title`}
                      className="text-2xl sm:text-3xl lg:text-4xl"
                    >
                      {section.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="text-base sm:text-lg">
                      {section.description}
                    </CardDescription>
                  </CardContent>
                </Card>
              </article>

              {/* Separator (except after last section) */}
              {index < sections.length - 1 && (
                <Separator className="max-w-4xl mx-auto" />
              )}
            </Fragment>
          ))}
        </div>
      </main>
    </div>
  );
}
